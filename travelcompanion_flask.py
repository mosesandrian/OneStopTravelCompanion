# -*- coding: utf-8 -*-
"""TravelCompanion API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13PS3ovZ9dfysSo9VraioJzlowkCPSSdn
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import json
import io

from flask import Flask, request
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from keras_preprocessing.text import tokenizer_from_json
from keras.models import load_model

!pip install flask-ngrok
from flask_ngrok import run_with_ngrok

MODEL_DIR = '/tmp/model1.h5'
WEIGHTS_DIR = '/tmp/weight1.h5'
TOKEN_DIR = '/tmp/tokenizer.json'
HOST = '127.0.0.1'
PORT = '5000'

app = Flask(__name__)
run_with_ngrok(app)

model = load_model(MODEL_DIR) # change file name
model.load_weights(WEIGHTS_DIR)
class_types = ['budaya' 'cagar_alam' 'maritim' 'religi' 'sejarah']
with open(TOKEN_DIR) as f:
  data = json.load(f)
  tokenizer = tokenizer_from_json(data)

@app.route("/")
@app.route("/home")
def home():
  return "<h1>Inference Classification Tourism Sites</h1>"

@app.route("/predict", methods=["POST"])
def predict():
  places = request.args.get('places', '')
  sequences = tokenizer.text_to_sequences(places)
  sequences_padded = pad_sequences(sequences,
                                   maxlen=10,
                                   truncating="post")
  predictions = model.predict(sequences_padded)
  response_json = {
      "data": places,
      "prediction": class_types[np.argmax(predictions[0])]
  }
  return json.dumps(response_json)

if __name__ == '__main__':
  app.run(host=HOST, port=PORT)